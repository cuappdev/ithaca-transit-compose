type Query {
  """
  Get all gyms.
  """
  getAllGyms: [Gym]

  """
  Get user by Net ID.
  """
  getUserByNetId(netId: String): [User]

  """
  Get all users given a giveaway ID.
  """
  getUsersByGiveawayId(id: Int): [User]

  """
  Get the days a user worked out for the current week.
  """
  getWeeklyWorkoutDays(id: Int): [String]

  """
  Get all of a user's workouts by ID.
  """
  getWorkoutsById(id: Int): [Workout]

  activities: [Activity]

  """
  Get all reports.
  """
  getAllReports: [Report]

  """
  Get all facility hourly average capacities.
  """
  getHourlyAverageCapacitiesByFacilityId(facilityId: Int): [HourlyAverageCapacity]
}

type Gym {
  id: ID!

  address: String!

  imageUrl: String

  latitude: Float!

  longitude: Float!

  name: String!

  activities: [Activity]

  amenities: [Amenity]

  facilities: [Facility]

  hours: [OpenHours]

  classes: [ClassInstance]

  reports: [Report]
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
"""
scalar Float

type Activity {
  id: ID!

  facilityId: Int!

  gymId: Int!

  hasMembership: Boolean!

  name: String!

  needsReserve: Boolean!

  pricing: [Price]
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31 - 1) and 2^31 - 1 since represented in JSON as double-precision floating point numbers specifiedby [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Int

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

type Price {
  id: ID!

  activityId: Int!

  cost: Float!

  name: String!

  rate: String

  type: PriceType!
}

"""
An enumeration.
"""
enum PriceType {
  RATE

  GEAR
}

type Amenity {
  id: ID!

  gymId: Int!

  type: AmenityType!
}

"""
An enumeration.
"""
enum AmenityType {
  SHOWERS

  LOCKERS

  PARKING

  ELEVATORS
}

type Facility {
  id: ID!

  facilityType: FacilityType!

  gymId: Int!

  name: String!

  activities: [Activity]

  capacity: Capacity

  equipment: [Equipment]

  hours: [OpenHours]
}

"""
An enumeration.
"""
enum FacilityType {
  FITNESS

  POOL

  BOWLING

  COURT
}

type Capacity {
  id: ID!

  count: Int!

  facilityId: Int!

  percent: Float!

  updated: Int!
}

type Equipment {
  id: ID!

  name: String!

  muscleGroups: [MuscleGroup]!

  cleanName: String!

  facilityId: Int!

  quantity: Int

  accessibility: AccessibilityType
}

"""
An enumeration.
"""
enum MuscleGroup {
  ABDOMINALS

  CHEST

  BACK

  SHOULDERS

  BICEPS

  TRICEPS

  HAMSTRINGS

  QUADS

  GLUTES

  CALVES

  MISCELLANEOUS

  CARDIO
}

"""
An enumeration.
"""
enum AccessibilityType {
  WHEELCHAIR
}

type OpenHours {
  id: ID!

  courtType: CourtType

  endTime: Int!

  facilityId: Int

  gymId: Int

  isShallow: Boolean

  isSpecial: Boolean!

  isWomen: Boolean

  startTime: Int!
}

"""
An enumeration.
"""
enum CourtType {
  BASKETBALL

  VOLLEYBALL

  BADMINTON
}

type ClassInstance {
  id: ID!

  gymId: Int

  classId: Int!

  location: String!

  instructor: String!

  isCanceled: Boolean!

  isVirtual: Boolean!

  startTime: DateTime

  endTime: DateTime

  class_: Class

  gym: Gym
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type Class {
  id: ID!

  name: String!

  description: String!

  classInstances: [ClassInstance]
}

type Report {
  id: ID!

  createdAt: DateTime!

  description: String!

  gymId: Int!

  issue: ReportType!

  gym: Gym
}

"""
An enumeration.
"""
enum ReportType {
  INACCURATE_EQUIPMENT

  INCORRECT_HOURS

  INACCURATE_DESCRIPTION

  WAIT_TIMES_NOT_UPDATED

  OTHER
}

type User {
  id: ID!

  email: String

  netId: String!

  name: String!

  workoutGoal: [DayOfWeekGraphQLEnum]

  giveaways: [Giveaway]
}

enum DayOfWeekGraphQLEnum {
  MONDAY

  TUESDAY

  WEDNESDAY

  THURSDAY

  FRIDAY

  SATURDAY

  SUNDAY
}

type Giveaway {
  id: ID!

  name: String!

  users: [User]
}

type Workout {
  id: ID!

  workoutTime: DateTime!

  userId: Int!
}

type HourlyAverageCapacity {
  id: ID!

  facilityId: Int!

  averagePercent: Float!

  hourOfDay: Int!

  dayOfWeek: DayOfWeekGraphQLEnum

  history: [Float]!
}

type Mutation {
  """
  Creates a new giveaway.
  """
  createGiveaway(name: String!): Giveaway

  """
  Creates a new user.
  """
  createUser(email: String!, name: String!, netId: String!): User

  """
  Enters a user into a giveaway.
  """
  enterGiveaway(giveawayId: Int!, userNetId: String!): GiveawayInstance

  """
  Set a user's workout goals.
  """
  setWorkoutGoals("The ID of the user." userId: Int!, "The new workout goal for the user in terms of days of the week." workoutGoal: [String]!): User

  """
  Log a user's workout.
  """
  logWorkout(userId: Int!, workoutTime: DateTime!): Workout

  """
  Creates a new report.
  """
  createReport(createdAt: DateTime!, description: String!, gymId: Int!, issue: String!): CreateReport
}

type GiveawayInstance {
  id: ID!

  userId: Int!

  giveawayId: Int!

  numEntries: Int!
}

type CreateReport {
  report: Report
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation and subscription operations.
"""
type __Schema {
  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields: [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args: [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  locations: [__DirectiveLocation!]!

  args: [__InputValue!]!

  onOperation: Boolean! @deprecated(reason: "Use `locations`.")

  onFragment: Boolean! @deprecated(reason: "Use `locations`.")

  onField: Boolean! @deprecated(reason: "Use `locations`.")
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

schema {
  query: Query
  mutation: Mutation
}
